* 오라클의 5가지 제약 조건 타입
목적: 저장된 테이블의 데이터가 결점이 없어야 된다. ( 무결성 보장 )
    
방법: 컬럼 단위로 지정 가능

가. primary key 제약조건 타입 ( 제약조건명이 아니다. ) ==> pk , 기본키
   - 테이블당 하나만 지정 가능
   - 목적: 레코드 식별
   - 제약: 반드시 값을 가져야 된다. ( null 불가, not null제약조건 )
          유일한 값을 가져야 된다. ( unique 제약조건 )
   - 자동으로 index가 생성된다. ( index 용도: 빠른 검색, 책의 색인표 역할 )
   - 하나의 컬럼 및 복합컬럼(2개이상) 가능하다.
   - 설정방법: 테이블 레벨 및 컬럼 레벨 모두 가능하다.
-------------------------------------------
나. unique 제약조건 타입 ----> uk
    - 테이블당 여러개 지정 가능
    - 목적: 유일한 값 저장
    - 제약: 유일한 값을 가져야 된다.
           null값을 가질수 있다.
    - 자동으로 index가 생성된다. ( index 용도: 빠른 검색, 책의 색인표 역할 )
    - 하나의 컬럼 및 복합컬럼(2개이상) 가능하다.
    - 설정방법: 테이블 레벨 및 컬럼 레벨 모두 가능하다.
-------------------------------------------
다. not null 제약조건 타입 --> nn
   - 테이블당 여러개 지정 가능
   - 목적: 기본적으로 저장할 수 있는 null 값 방지  
          null --> not null (변경)
	   X  ----> 제약조건 (추가:  테이블레벨 문법으로 한다.)
   - 제약: 무조건 값을 저장해야 된다.
   - 하나의 컬럼만 지정 가능하다.
   - 설정방법:  컬럼 레벨만 가능하다.
----------------------------------------
라. check 제약조건 타입 --> ck
   - 테이블당 여러개 지정 가능
   - 목적: 비즈니스 규칙 설정 ( 예> 중학교의 학년(1~3학년), 성별(남/여), 나이(2자리까지만),....
   - 하나의 컬럼만 지정 가능하다. ( and 논리 연산자 사용 가능)
   - 설정방법: 테이블 레벨 및 컬럼 레벨 모두 가능하다.
-------------------------------------\
마. foreign key 제약조건 타입 --> fk, 참조키, 외래키
   - 테이블당 여러개 지정 가능
   - 목적: 다른 테이블의 참조해서 연결하는 역할
   - 설정방법: 테이블 레벨 및 컬럼 레벨 모두 가능하다.

#######################################
트랜잭션(transaction)
정의: 여러 DML(insert,update,delete)을
    하나의 작업으로 처리하기 위한 묶음.
    
#######################################
오라클의 5가지 객체 (외우기)

가. 테이블(table) :  실제 데이터 저장
-----------------------------------------
나. 인덱스(index) : 테이블의 검색을 빠르게
다. 뷰(view)     : - 테이블의 특정 컬럼들을 은닉화 기능
                 - 테이블의 데이터를 검색하는 복잡한 SQL문을 간소화 기능

마. 시퀀스(sequence): 테이블의 특정 컬럼값을 자동으로 넘버링(numbering) 예> 게시판의 글번호

바. 시노님(synonym): 테이블 접근시 별칭지정하여 보안 강화

5가지 객체를 생성,수정,삭제 작업==> DDL(Data Definition Language), 자동 commit 됨(반영, 취소불가).

###########################################################
오라클 문자 및 날짜 리터럴

자바:   문자하나 : 'A', '홍'
       문자열  : "ABC", "홍길동"


SQL:  문자하나 및 문자열 : 'A', 'ABC', '홍', '홍길동'
      날짜 : '03/12/11'
    ==> SQL에서 문자 및 날짜 데이터는 반드시 '' 사용한다.
    ==> "" 사용하는 단 하나의 경우는 별칭 사용시.


#####################################
SQL 의 null 값
- 컬럼의 값이 없을 때. ( 0 하고 다르다. )
- 연산시 결과는 null 반환 ===> NVL(컬럼, 치환값)
- 기본적으로 테이블에는 null 값 허용한다. =========> not null 제약조건 타입을 지정해서 방지
- null 값을 조회할때는 is null 연산자를 사용한다.
- null 값을 정렬할 때 가장 큰 값으로 처리된다.
###################################
오라클의 날짜
1) 기본 출력 포맷: RR/MM/DD ===> 년도2자리/월2자리/일2자리
2) 년도 포맷
   - YYYY/YY
   - RRRR/RR

3) 내부적으로 수치데이터로 처리된다. 따라서 비교할 수 있다.
4) 날짜 데이터를 사용하기 위해서는 반드시 '' 사용한다.

##########################################
오라클 SQL 함수
 otn.oracle.com
1)단일행 함수
  - 행(레코드) 단위로 적용
  - 데이터 종류 구분
    가. 문자열 함수
        - 첫글자, 대문자, 소문자, 길이, 연결, 채우기, 문자의위치,공백및문자제거

    나. 수치 함수
    다. 날짜 함수
    라. 변환 함수 (  수치 <-->문자열<-->날짜 ) 
    마. 나머지

2)그룹함수(복수행 함수)
  - 하나의 행 또는 여러 행이 그룹으로 묶일 수 있다.
    묶인 그룹단위로 적용
  - 요구사항의 텍스트가  ~별 예> 성별, 학년별, 부서별,...
  - 기능 종류
    가. 최대값: max(컬럼)
    나. 최소값: min(컬럼)
    다. 합계:  sum(컬럼)
    라. 평균:  avg(컬럼)
    마. 레코드갯수: count(*)

#################################
dual 
- 임시 테이블 ( dummy )
- 용도: from 절에 적용할 마땅한 테이블이 없는 경우에 사용된다.

  select 25487*895632
  from dual;

  select sysdate
  from dual;

###################################
그룹함수(group function)

1. 그룹핑 방법

 가. 자동으로 묶임
     - 기본적으로 테이블은 하나로 묶여 있음.
     - 그룹함수를 제한없이 사용할 수 있다.

 나. 명시적으로 묶임
     - 요청 text가 ~별로 요청하면 무조건 묶어야 된다.
       예>학년별, 부서별, 성별,...
     - group by 컬럼|표현식
    
   select *|컬럼|....
   from 테이블
   where 조건식
   group by
   having 조건식
   order by 표현식|별칭|n asc|desc;
   
  ###########################
조인(join)

가. 용도
 원하는 데이터(컬럼)가 하나의 테이블이 아닌
 여러 테이블에 분산되어 있는 경우에
 여러 테이블에 연결(조인,join)해서 원하는 결과를 찾는 방법.
  
나. 종류1

  - inner 조인
     : 여러테이블을 연결할 조건을 지정할때
       정확하게 일치하는 행만 반환하는 조인.
       ( 일치하지 않는 행은 누락된다. )
     : 기본적으로 조인은 inner 조인이다.

  - outer 조인
     : 일치하지 않은 누락된 행까지 포함 반환.


다. 종류2

  - 오라클 조인
    : 오라클 DBMS에 의존적인 조인
    : 종류
   
      - equi 조인    : 조인조건을 지정할 때 = (동등연산자) 사용하는 경우.
                    : 연결하는 컬럼은 일반적으로 foreign key 와 primary key를 사용한다.

      - non equi 조인: 조인조건을 지정할 때 = (동등연산자)가 아닌 다른 연산자 사용하는 경우. 
                     예> between a and b
      - self 조인    : 자신의 테이블을 조인하는 경우.
                     예> 사원의 관리자명을 구할 때
 
      - outer 조인   : 조인조건에 일치하지 않아서 누락된 데이터까지 포함되어 반환.
                     (+) 연산자를 이용.

      - cartesian product 조인:  데이터로 사용 불가. 쓰레기 데이터.
                             :  조인조건을 명시 안하거나 했는데 잘못 조인조건을 지정한 경우에 발생된다.

    : where절에 조인조건을 지정한다.
      전통적으로 selection(필터링,검색조건)할 때 사용했던 where절에 조인조건 + 검색조건을 같이 사용한다.

  - ANSI 조인
    : 모든 DBMS에서 사용 가능한 조인
    : 종류
      - t1 natural join t2 : 두 개의 테이블에서 공통 컬럼을 찾아서 equi 조인한다. ( = 동등연산자 )
      - t1 join t2 using(컬럼) : 두 개의 테이블에서 명시한 컬럼을 이용해서 equi 조인한다. ( = 동등연산자 )
      - t1 join t2 on 조인조건식 : 두 개의 테이블에서 명시한 조인조건을 이용해서 조인한다.( = 동등 및 부등 연산자 사용가능)
      - self 조인
      - t1 cross join t2 : 데이터로 사용 불가. 쓰레기 데이터.

      - outer 조인
       t1 left outer join t2 ON 조인조건식|USING(컬럼) : t1의 레코드는 모두 반환.
       t1 right outer join t2 ON 조인조건식|USING(컬럼) : t2의 레코드는 모두 반환.
       t1 full outer join t2 ON 조인조건식|USING(컬럼)  : t1과 t2의 레코드는 모두 반환.

    : from절에 조인조건을 지정한다.
      where절은 검색조건을 지정할 때 사용한다.

#########################################
서브쿼리(sub query)

가. query ==> select문 의미
   sub query는 하나의 SQL문에 여러 개의 select 문을 사용할 수 있다.
   
나. 이유?
   하나의 select문으로는 원하는 데이터를 못 얻을때이다.

  예> last_name 이 'Whalen'인 사원의 salary 보다 많은 사원 출력?

    select salary
    from employees
    where last_name='Whalen';
   
    select *
    from employees
    where salary > 800;
==> 합치면 subquery 된다.
    select
        ..
	select 
	from 
	...  ;

    select *
    from employees
    where salary > (select salary
                   from employees
                   where last_name='Whalen');

다. 사용 가능한 SQL
  - select 문 ( where절, from 절, select, having 절, order by 절..)
  - DML 문 ( insert, update, delete 문 )
  - DDL 문 ( create 문 )
  ==> 값을 지정할수 있는 곳이면 sub query 사용 가능하다.
라. sub query 특징
   - 반드시 ()사용
   - 다른 main sql문보다 먼저 실행하고 실행된 결과를 가지고 main sql문이 사용한다.
   - main query와 sub query 간에 사용되는 연산자를 정해져 있다.
     기준은 sub query 실행결과가 하나의 행(단일행) 또는 여러 행(복수행) 결과에 따라 달라진다.
    a. 단일행 연산자
         - 비교 연산자 ( =, >, >=, <, <= , != )
    b. 복수행 연산자
         - IN
	 - >all : 서브쿼리의 최대값 보다 큰 메인쿼리 값을 반환
	         ==>  where sal > (select max(sal)~ ); 

	   <all : 서브쿼리의 최소값 보다 작은 메인쿼리 값을 반환
                ==>  where sal < (select min(sal)~ ); 

	 - >any : 서브쿼리의 최소값 보다 큰 메인쿼리 값을 반환
	         ==>  where sal > (select min(sal)~ ); 

	   <any : : 서브쿼리의 최대값 보다 작은 메인쿼리 값을 반환
                ==>  where sal < (select max(sal)~ ); 

	 - exists
	    : 서브쿼리가 결과가 있으면(존재하면)메인 쿼리가 실행되고
	      서브쿼리가 결과가 없으면 메인 쿼리가 실행 안됨. 

####################################
INSERT 문
1) 용도: 새로운 행(레코드) 생성

2) 종류
   - 단일 테이블의 단일행 생성(기본적으로 insert문 의미)
       가. 컬럼명 지정 
          insert into 테이블명 (컬럼명,컬럼명2)
	  values ( 값, 값2 );
        ==> 명시된 컬럼명에 일대일 대응되어 값이 저장이 된다. ( 갯수일치, 데이터타입 일치, 크기 일치 )
        ==> 명시되지 않은 컬럼의 값은 null이 자동으로 저장된다.
	==> 주요 특징은 저장하고 싶은 컬럼만 지정할 수 있다. (나머지는 null로 저장됨)
        ==> 권장 방법 ( 가독성 높다 )

       나. 컬럼명 미지정
          insert into 테이블명 
	  values ( 값, 값2, 값3,... );

        ==> 컬럼명을 지정하지 않았기 때문에 명시된 값은 자동으로 테이블이 가지고 있는 컬럼 순서대로 매핑되어 저장된다.
	==> 주요 특징은 테이블의 모든 컬럼에 값을 전부 지정해야 된다. 생략시 에러 발생

   - 단일 테이블의 복수행 생성
        
	 insert into 테이블명 (컬럼명,컬럼명2)
	 select 
	 from     ;
      


   - 복수 테이블의 단일행 생성

   - 복수 테이블의 복수행 생성

      가) 무조건 insert all
	 
	    insert all
	        into 테이블1 values (값, 값2,....)
	        into 테이블2 values (값, 값2,....)
            select
	    from    ;

      나) 조건 insert all

            insert all
	        when 조건식1 then into 테이블1 values (값, 값2,....)
	        when 조건식2 then into 테이블2 values (값, 값2,....)
            select
	    from    ;

         => 만약에 조건식1과 조건식2 모두 만족하면 모든 테이블에 저장된다.

      다) insert first

           insert first
	        when 조건식1 then into 테이블1 values (값, 값2,....)
	        when 조건식2 then into 테이블2 values (값, 값2,....)
            select
	    from    ;

        => 만약에 조건식1과 조건식2 모두 만족하더라도 테이블1에만 저장된다.

####################################
UPDATE 문
1) 용도: 기존 컬럼값을 수정

2) 문법

  가) where 없는 문
     
       update 테이블명
       set  컬럼명=값, 컬럼명2=값2, .. ;
 
     ==> 전체 레코드의 컬럼이 변경된다.

  가) where 있는 문

       update 테이블명
       set  컬럼명=값, 컬럼명2=값2, .. 
       where  조건식;

     ==> 조건에 일치하는 레코드의 컬럼만 변경된다.
     ==> 일반적으로 update 문 의미한다.

3) update + subquery
  
       update 테이블명
       set  컬럼명= suquery , 컬럼명2=suqquery, .. 
       where  조건식;

####################################
delete 문
1) 용도: 기존 레코드 삭제
2) 문법
  가) where 없는 문    
        delete from 테이블;
     ==> 전체 레코드가 삭제된다.

  가) where 있는 문
       delete from 테이블 
       where  조건식;

     ==> 조건에 일치하는 레코드만 삭제된다.
     ==> 일반적으로 delete 문 의미한다.
3) delete + subquery
  
       delete from 테이블  
       where  loc = 값;

       delete from 테이블  
       where  loc = subquery
              and
	      dname = subquery;

####################################
트랜잭션(transaction)
1)개념:
2)특징
   - DML 사용하면 자동으로 트랜잭션이 시작된다.
     명시적으로 commit/rollback 트랜잭션을 종료시켜야 된다.

   - 만약에 명시적으로 트랜잭션을 종료 안하면 큰 이슈가 발생된다. ( 다른 사용자가 무한대기에 빠진다. )
    따라서 명시적으로 트랜잭션을  반드시 종료시켜야 된다.

####################################
DDL ( Data Definition Language)
1. 개념: 오라클의 5가지 객체를 생성,수정,삭제, 절삭 가능
2. 5가지 객체
   - 테이블(table) : 데이터 저장
   - 인덱스(index)
   - 뷰(view)
   - 시퀀스(sequence)
   - 시노님(synonym)

3. 테이블 생성

   가. CTAS
       Create Table
       as
       SubQuery;
 

   나. 일반적인 방법 1
     ==> 제약조건이 없기 때문에 모든 컬럼에 중복 가능하고 null 가능하다.
     ==> 저장할 때 컬럼명을 명시하지 않는 컬럼은 자동으로 null 저장됨.

     create table 테이블명(
        컬럼명 데이터타입,
	컬럼명 데이터타입,
	컬럼명 데이터타입,
	..
     );

     create table 스키마.테이블명( // 원래 맞는 문법
        컬럼명 데이터타입,
	컬럼명 데이터타입,
	컬럼명 데이터타입,
	..
     );
    
     select
     from 테이블명;

     select
     from 스키마.테이블명; // 원래 맞는 문법

     데이터타입: p243
        
	 수치:  number(자릿수)
              number(전체자릿수, 소수점자릿수)
             예> number(2) => 0 ~ 99 까지 저장 가능
	 문자: char(byte) : 고정길이, 최대 2000 byte
	      varchar2(byte): 가변길이, 최대 4000 byte
              CLOB (Character Large OBject): 최대 4GB

           => 오라클에서는 한글 한글자 2byte : AL16UTF8
	                       3byte : AL32UTF8
              -- 한글 byte 확인
             select *
             from NLS_DATABASE_PARAMETERS
             where parameter = 'NLS_CHARACTERSET';  ==> AL32UTF8

	     char(9)==> 영문자 9글자, 한글은 3글자까지만 저장 가능.
	   
	  날짜: Date

	  바이너리 데이터: 이미지, 파일 저장 가능
	              
		      BFILE : 최대 4GB
		      BLOB(Binary Large OBject): 최대 4GB

   나. 일반적인 방법 2 - default 옵션
 
    ==> 컬럼명2에 명시적으로 값을 저장하지 않아도 자동으로 기본값으로 저장된다. ( null 저장 방지 기능 )
    ==> 날짜, 성별

       create table 테이블명(
        컬럼명1 데이터타입,
	컬럼명2 데이터타입 DEFAULT 기본값,
	컬럼명3 데이터타입,
	..
     );

   나. 일반적인 방법 3 - 제약조건 (constraints )- 매우 중요하다.
    ==> 제약조건 타입 5개 종류: p 250

    a. 컬럼레벨 방식
      ==> 컬럼을 지정할 때 제약조건을 같이 지정하는 방식
      ==> 5가지 제약조건을 모두 컬럼레벨 방식이 지원된다.

          create table 테이블명(
	    컬럼명1 데이터타입 CONSTRAINT 제약조건명  제약조건타입,  --권장함, 제약조건명으로 삭제 및 비활성화
	                                               제약조건명: 테이블명_컬럼명_축약제약조건타입
	    컬럼명2 데이터타입 제약조건타입,                     --권장안함, 자동으로 생성된 이름은 SYSXXX
	    컬럼명3 데이터타입,
	    ..
          );

    b. 테이블 레벨 방식
      ==> 컬럼을 모두 지정한 후에 가장 마지막에 제약조건을 따로 지정하는 방식.
      ==> 4가지 제약조건을 모두 컬럼레벨 방식이 지원된다. ( not null 지원 안됨 )

         create table 테이블명(
	    컬럼명1 데이터타입,
	    컬럼명2 데이터타입,
	    컬럼명3 데이터타입,

	    COSTRAINT 제약조건명 제약조건타입(컬럼명1)
	    
          );